import { useState, useEffect } from "react";
import { Search, Volume2 } from "lucide-react";
import "./GovtSchemes.css";

const schemes = [
  {
    id: 1,
    title: "‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§™‡•Ä‡§ï ‡§µ‡§ø‡§Æ‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ",
    status: "‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§Ø‡•ã‡§ú‡§®‡§æ",
    date: "10/01/2025 ‡§™‡§æ‡§∏‡•Ç‡§® ‡§∏‡•Å‡§∞‡•Ç",
    state: "‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞",
    details: "‡§π‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§®‡•à‡§∏‡§∞‡•ç‡§ó‡§ø‡§ï ‡§Ü‡§™‡§§‡•ç‡§§‡•Ä‡§Æ‡•Å‡§≥‡•á ‡§™‡•Ä‡§ï ‡§®‡§∑‡•ç‡§ü ‡§ù‡§æ‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§∂‡•á‡§§‡§ï‡§±‡•ç‡§Ø‡§æ‡§Ç‡§®‡§æ ‡§µ‡§ø‡§Æ‡§æ ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£ ‡§Ü‡§£‡§ø ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡•á.",
    eligibility: ["‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°", "‡§¨‡§Å‡§ï ‡§ñ‡§æ‡§§‡•á ‡§§‡§™‡§∂‡•Ä‡§≤", "‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡•á ‡§Æ‡§æ‡§≤‡§ï‡•Ä ‡§π‡§ï‡•ç‡§ï ‡§¶‡§∏‡•ç‡§§‡§ê‡§µ‡§ú"],
    applicationLink: "https://pmfby.gov.in",
  },
  {
    id: 2,
    title: "‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§®‡•ç‡§Æ‡§æ‡§® ‡§®‡§ø‡§ß‡•Ä",
    status: "‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§Ø‡•ã‡§ú‡§®‡§æ",
    date: "12/01/2025 ‡§™‡§æ‡§∏‡•Ç‡§® ‡§∏‡•Å‡§∞‡•Ç",
    state: "‡§ï‡§∞‡•ç‡§®‡§æ‡§ü‡§ï",
    details: "‡§™‡•Ä‡§è‡§Æ-‡§ï‡§ø‡§∏‡§æ‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§∂‡•á‡§§‡§ï‡§±‡•ç‡§Ø‡§æ‡§Ç‡§®‡§æ ‡§¶‡§∞‡§µ‡§∞‡•ç‡§∑‡•Ä ‚Çπ6,000 ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§Æ‡§¶‡§§ ‡§¶‡•á‡§§‡•á, ‡§ú‡•Ä ‡§¶‡§∞ 2,000 ‡§∞‡•Å‡§™‡§Ø‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ ‡§§‡•Ä‡§® ‡§π‡§™‡•ç‡§§‡•ç‡§Ø‡§æ‡§Ç‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§¶‡§ø‡§≤‡•Ä ‡§ú‡§æ‡§§‡•á.",
    eligibility: ["‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°", "‡§¨‡§Å‡§ï ‡§ñ‡§æ‡§§‡•á ‡§§‡§™‡§∂‡•Ä‡§≤", "‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡§æ ‡§Æ‡§æ‡§≤‡§ï‡•Ä‡§ö‡§æ ‡§™‡•Å‡§∞‡§æ‡§µ‡§æ"],
    applicationLink: "https://pmkisan.gov.in",
  },
  {
    "id": 3,
    "title": "‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§ï‡•É‡§∑‡•Ä ‡§∏‡§ø‡§Ç‡§ö‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ",
    "status": "‡§≤‡§µ‡§ï‡§∞‡§ö ‡§ï‡§æ‡§≤‡§¨‡§æ‡§π‡•ç‡§Ø ‡§π‡•ã‡§£‡§æ‡§∞",
    "date": "‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§§‡§æ‡§∞‡•Ä‡§ñ - ‡•ß‡•´ ‡§ú‡§æ‡§®‡•á‡§µ‡§æ‡§∞‡•Ä",
    "state": "‡§™‡§Ç‡§ú‡§æ‡§¨",
    "details": "‡§∂‡•á‡§§‡•Ä‡§§‡•Ä‡§≤ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§ï‡§§‡§æ ‡§∏‡•Å‡§ß‡§æ‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§£‡§ø ‡§ú‡§≤‡§∏‡§Ç‡§∏‡§æ‡§ß‡§®‡§æ‡§Ç‡§ö‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§µ‡§æ‡§™‡§∞ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§π‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§Ü‡§π‡•á.",
    "eligibility": ["‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°", "‡§ú‡§Æ‡•Ä‡§® ‡§Æ‡§æ‡§≤‡§ï‡•Ä ‡§ï‡§æ‡§ó‡§¶‡§™‡§§‡•ç‡§∞‡•á"],
    "applicationLink": "https://pmksy.gov.in"
  },
  {
    "id": 4,
    "title": "‡§®‡•Ö‡§∂‡§®‡§≤ ‡§Ö‚Äç‡•Ö‡§ó‡•ç‡§∞‡§ø‡§ï‡§≤‡•ç‡§ö‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü (eNAM)",
    "status": "‡§≤‡§µ‡§ï‡§∞‡§ö ‡§ï‡§æ‡§≤‡§¨‡§æ‡§π‡•ç‡§Ø ‡§π‡•ã‡§£‡§æ‡§∞",
    "date": "‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§§‡§æ‡§∞‡•Ä‡§ñ - ‡•ß‡•´ ‡§ú‡§æ‡§®‡•á‡§µ‡§æ‡§∞‡•Ä",
    "state": "‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞",
    "details": "‡§ï‡•É‡§∑‡•Ä ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§Ö‡§ñ‡§ø‡§≤ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§á‡§≤‡•á‡§ï‡•ç‡§ü‡•ç‡§∞‡•â‡§®‡§ø‡§ï ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞ ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤.",
    "eligibility": ["‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°", "‡§∂‡•á‡§§‡§ï‡§∞‡•Ä ‡§®‡•ã‡§Ç‡§¶‡§£‡•Ä ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞"],
    "applicationLink": "https://enam.gov.in"
  }
];

export default function GovtSchemes() {
  const [selectedScheme, setSelectedScheme] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedState, setSelectedState] = useState("");
  const [translatedSchemes, setTranslatedSchemes] = useState(schemes);
  const [selectedLanguage, setSelectedLanguage] = useState("mr");

  const languageCodes = {
    en: "English",
    hi: "Hindi",
    mr: "Marathi",
  };

  useEffect(() => {
    const translateSchemes = async () => {
      if (selectedLanguage === "mr") {
        setTranslatedSchemes(schemes);
        return;
      }

      const translatedData = await Promise.all(
        schemes.map(async (scheme) => {
          const translatedTitle = await translateText(scheme.title, selectedLanguage);
          const translatedStatus = await translateText(scheme.status, selectedLanguage);
          const translatedDate = await translateText(scheme.date, selectedLanguage);
          const translatedDetails = await translateText(scheme.details, selectedLanguage);
          const translatedState = await translateText(scheme.state, selectedLanguage);
          return {
            ...scheme,
            title: translatedTitle,
            status: translatedStatus,
            date: translatedDate,
            state: translatedState,
            details: translatedDetails,
          };
        })
      );
      setTranslatedSchemes(translatedData);
    };

    translateSchemes();
  }, [selectedLanguage]);

  const translateText = async (text, targetLang) => {
    try {
      const response = await fetch(`https://translate.googleapis.com/translate_a/single?client=gtx&sl=mr&tl=${targetLang}&dt=t&q=${encodeURIComponent(text)}`);
      const data = await response.json();
      return data[0].map((item) => item[0]).join("");
    } catch (error) {
      console.error("Translation error:", error);
      return text;
    }
  };

  const speakText = async (text, lang) => {
    try {
      const voiceId = lang === "en" ? "arman" : "diya";
      const response = await fetch("https://waves-api.smallest.ai/api/v1/lightning/get_speech", {
        method: "POST",
        headers: {
          Authorization: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2N2QxY2QxZDE5MTUxNTkzMzFlYzUyM2IiLCJpYXQiOjE3NDE4MDMzNjh9.TGDZPo6btvAk2Z1DaNIK0TKUJ5ZgqL5vFLp9zt2cygI",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ voice_id: voiceId, text, speed: 1, sample_rate: 24000, add_wav_header: true }),
      });

      const audioBlob = await response.blob();
      const audioUrl = URL.createObjectURL(audioBlob);
      const audio = new Audio(audioUrl);
      audio.play();
    } catch (error) {
      console.error("Speech error:", error);
    }
  };

  return (
    <div className="container">
      {!selectedScheme ? (
        <div>
          <h2 className="title">‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§∂‡•ã‡§ß‡§æ</h2>
          <div className="search-container">
            <input
              type="text"
              placeholder="‡§Ø‡•ã‡§ú‡§®‡§æ ‡§∂‡•ã‡§ß‡§æ"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <Search className="search-icon" />
          </div>
          <select onChange={(e) => setSelectedState(e.target.value)}>
            <option value="">‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§®‡§ø‡§µ‡§°‡§æ</option>
            <option value="‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞">‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞</option>
            <option value="‡§ï‡§∞‡•ç‡§®‡§æ‡§ü‡§ï">‡§ï‡§∞‡•ç‡§®‡§æ‡§ü‡§ï</option>
          </select>

          <select onChange={(e) => setSelectedLanguage(e.target.value)} value={selectedLanguage}>
            {Object.entries(languageCodes).map(([code, name]) => (
              <option key={code} value={code}>{name}</option>
            ))}
          </select>

          {translatedSchemes.map((scheme) => (
            <div key={scheme.id} className="card">
              <h3>{scheme.title}</h3>
              <p className="status">{scheme.status}</p>
              <p className="date">{scheme.date}</p>
              <p className="state">{scheme.state}</p>
              <p>{scheme.details}</p>

              <button onClick={() => speakText(scheme.details, selectedLanguage)}>
                <Volume2 size={18} />
              </button>

              <button onClick={() => { setSelectedScheme(scheme); }}>
                ‡§§‡§™‡§∂‡•Ä‡§≤ ‡§™‡§π‡§æ
              </button>
            </div>
          ))}
        </div>
      ) : (
        <div>
          <button onClick={() => setSelectedScheme(null)} className="back-button">
            ‚Üê ‡§Æ‡§æ‡§ó‡•á ‡§ú‡§æ
          </button>
          <h2 className="title">{selectedScheme.title}</h2>
          <p>{selectedScheme.details}</p>

          <button onClick={() => speakText(selectedScheme.details, selectedLanguage)}>
            üîä ‡§µ‡§æ‡§ö‡§æ
          </button>

          <a href={selectedScheme.applicationLink} target="_blank" rel="noopener noreferrer">
            <button className="apply-button">‡§Ü‡§§‡§æ ‡§Ö‡§∞‡•ç‡§ú ‡§ï‡§∞‡§æ</button>
          </a>
        </div>
      )}
    </div>
  );
}
